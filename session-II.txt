- Designs -- coninued ... 
-------------------------  
  - Database design 
    - At the core of every application is the database. The database is where we store all the data that is used in our application. 

    - Our job in here is to identify and organize the data that needs to be saved in the database and structure it in table format. The database should be designed in a way that minimizes redundancy and maximizes efficiency. 

    - There is no one right way to follow in here. You just have to look around and decide on the best way to structure the data. You can use some common principles like normalization, etc. 

    * Usually, the first step is to identify the kind of data that we need to save 
      - A good place to start would be the design of the UI. 
      - We can also look at the wireframes and the user stories to identify the data we need to save. Lets start by collecting/identifying all the data we need to save in our database. 

      - Let's start by designing the tables for data related with employee. 
        - From the desings, we can identify the following data that we need to save 
          * Add employee design 
            - Employee email 
            - Employee first name
            - Employee last name
            - Employee role
            - Employee phone number
            - Employee login password 
        - Now lets think of additional data that we need to save even if they are not shown on the design 
          - Flag to indicate if the employee is active or not 
          - Added date of the employee (If in the future we need to know when the employee was added to the system) 
          - You can add a couple of more fields that you think would be useful in the future. 
        - Let's now try to structure these fields in table formats 

        ** Here are a couple of thumb rules you could follow when structuring the fields in different tables 
          1. Normalize the tables as much as possible 
            - Means, try to have as many tables as possible by trying to keep the fields in each table to a minimum. (Strive to make them less than three fields per table) 
              - This will help us to maximize efficiency. 
          2. Avoid redundancy as much as possible 
            - Means, try to avoid having the same field in multiple tables. 
          3. Provide a unique identifier for each table 
            - This will help us to identify each record in the table easily.
          4. Link related tables together by providing a foreign key 
          5. Try to keep the field names consistent across tables 
            - For example, if you have a field called "employee_id" in one table, try to use the same field name in other tables as well (Usually when used as a foreign key).
          6. Try to use descriptive field names 
          7. Carefully choose the data type of each field that can be applied for broader use cases  
            - For example, if you are saving a phone number, you can use a string data type instead of an integer data type. 

        - Now let's try to structure the data we identified in the above steps in table format. 

          * Remember to think of relations among tables and try to link them together by providing a foreign key. 

          Table 1: 
            - Table name: employee 
            - Table fields: 
              - employee_id (Primary key) INT  
              - employee_email (Unique) VARCHAR(255)  
              - employee_active_status INT  (Could be a Boolean as well)
              - employee_added_date DATETIME 

          Table 2: 
            - Table name: employee_info
            - Relations: 
              - With employee table: One to one on employee_id  
            - Table fields:
              - employee_info_id (Primary key) INT
              - employee_id (Foreign key) INT    
              - employee_first_name VARCHAR(255) 
              - employee_last_name VARCHAR(255)
              - employee_phone VARCHAR(255) 

          Table 3:
            - Table name: employee_pass 
            - Relations:
              - With employee table: One to one on employee_id 
            - Table fields: 
              - employee_pass_id (Primary key) INT 
              - employee_id (Foreign key) INT 
              - employee_password_hashed VARCHAR(255) 

          Table 4: 
            - Table name: company_roles 
            - Table fields: 
              - company_role_id (Primary key) INT 
              - company_role_name VARCHAR(255) 

          Table 5:
            - Table name: employee_role
            - Relations: 
              - With employee table: One to one on employee_id 
              - With company_roles table: One to one on company_role_id
            - Table fields:
              - employee_role_id (Primary key) INT
              - employee_id (Foreign key) INT
              - company_role_id (Foreign key) INT

              * Admin, Manager and Employee are the roles we will have in our application. 

      - Lets us now continue to customer related tables   
        - From the desings, we can identify the following data that we need to save
          * Add customer & add vehicle designs   
            - Customer email 
            - Customer first name 
            - Customer last name
            - Customer phone number 
            - Vehicle year
            - Vehicle make
            - Vehicle model
            - Vehicle type
            - Vehicle mileage
            - Vehicle tag 
            - Vehicle serial number  
            - Vehicle color
        
        - Now lets think of additional data that we need to save even if they are not shown on the design 
          - Customer added date 
          - Unique hash for the customer to later use instead of using the customer id 
          - Flag to indicate if the customer is active or not 
        
        - Let's now try to structure these fields in table formats 
          Table 6: 
            - Table name: customer_identifier 
            - Table fields:
              - customer_id (Primary key) INT 
              - customer_email (Unique) VARCHAR(255) 
              - customer_phone_number (Unique) VARCHAR(255)
              - customer_added_date DATETIME
              - customer_hash VARCHAR(255) 

          Table 7:
            - Table name: customer_info
            - Relations:
              - With customer table: One to one on customer_id
            - Table fields:
              - customer_info_id (Primary key) INT
              - customer_id (Foreign key) INT
              - customer_first_name VARCHAR(255)
              - customer_last_name VARCHAR(255)
              - customer_active_status INT 

          Table 8: 
            - Table name: customer_vehicle_info 
            - Relations: 
              - With customer table: One to one on customer_id
            - Table fields: 
              - vehicle_id (Primary key) INT 
              - customer_id (Foreign key) INT 
              - vehicle_year INT 
              - vehicle_make VARCHAR(255) 
              - vehicle_model VARCHAR(255) 
              - vehicle_type VARCHAR(255) 
              - vehicle_mileage INT 
              - vehicle_tag VARCHAR(255) 
              - vehicle_serial_number VARCHAR(255) 
              - vehicle_color VARCHAR(255)

      - Let's now continue to the service related tables 
        - From the desings, we can identify the following data that we need to save 
          * services-manage design 
            - Service name 
            - Service description 

        - Structure the data in table format 
          Table 9: 
            - Table name: common_services 
            - Table fields: 
              - service_id (Primary key) INT 
              - service_name VARCHAR(255) 
              - service_description VARCHAR(255) 
      
      - Let's now continue to the order related tables 
        - From the desings, we can identify the following data that we need to save  
          - Order date
          - Order hash (To later use instead of using the order id) 
          - Order status (Recieved, In progress, Completed)
          - Additional requests from the customer 
          - Order total price 
        
        - Lets think of additional data that we need to save
          - Estimated time to complete the order 
          - Actual completion time 
          - Flag to indicate if the additional requests are closed or not 

        - Let's now try to structure these fields in table formats           
          
          Table 10: 
            - Table name: orders
            - Relations: 
              - With customer table: One to one on customer_id
              - With employee table: One to one on employee_id 
            - Table fields:
              - order_id (Primary key) INT
              - customer_id (Foreign key) INT
              - employee_id (Foreign key) INT
              - order_date DATETIME
              - order_hash VARCHAR(255)
              - order_status VARCHAR(255)

          Table 11:
            - Table name: order_info
            - Relations:
              - With orders table: One to one on order_id
            - Table fields:
              - order_info_id (Primary key) INT
              - order_id (Foreign key) INT
              - order_total_price INT
              - order_estimated_completion_date DATETIME
              - order_completion_date DATETIME
              - order_additional_requests VARCHAR(255)
              - order_additional_requests_completed INT 

          Table 12:
            - Table name: order_services
            - Relations:
              - With orders table: One to one on order_id
              - With common_services table: One to one on service_id
            - Table fields:
              - order_service_id (Primary key) INT
              - order_id (Foreign key) INT
              - service_id (Foreign key) INT
              - service_completed INT 
          
          Table 13:
            - Table name: order_status 
            - Relations:
              - With orders table: One to one on order_id
            - Table fields:
              - order_status_id (Primary key) INT
              - order_id (Foreign key) INT
              - order_status INT 

    * Prepare the SQL Queries to create the tables 
      - Sample query to create one table is 


      Table 1: 
        - Table name: employee 
        - Table fields: 
          - employee_id (Primary key) INT  
          - employee_email (Unique) VARCHAR(255)  
          - employee_active_status INT  (Could be a Boolean as well)
          - employee_added_date DATETIME 


        CREATE TABLE IF NOT EXISTS `employee` (
          `employee_id` int(11) NOT NULL AUTO_INCREMENT,
          `employee_email` varchar(255) NOT NULL,
          `active_employee` int(11) NOT NULL,
          `added_date` DATETIME DEFAULT CURRENT_TIMESTAMP,
          PRIMARY KEY (employee_id), 
          UNIQUE (employee_email)
        ) ENGINE=InnoDB;
      
      Note: You can use codeEx or ChatGPT to write the queries. (Demo)
      
  - API endpoints design 
    - As a Fullstack developer, this is the core of everything. Please spend as much time as possible to understand every aspect of the API endpoints design. Once you understand this, what is left will be a straight forward step by step process that you can easily follow.  

    Note: 
      - There are multiple approaches that developers take when they design API endpoints. Each approach has its own pros and cons. Choosing a specific approach is usually dependent on the scale of the project, the number of people working on the project, the prefred style of the developers and things like that. 

      - One of the common approach is called the Design-First appraoch. In this approach, the developer will first design the API endpoints, prepare the API documentation and then start working on the backend and frontend once every thing is ready. 
        - This approach is usually used when the project is big and there are multiple developers working on the project. 
        - It has the advantage of having a clear understanding of the API endpoints and the data that will be sent and recieved from the backend before a single code is written.
          - But this can only be achieved with thorough understanding of the project combined with higher level of experience to clearly anticipate the data that will be sent and recieved from the backend. Requires multiple iterations of the design and documentation to get it right. 

      - The other approach is, the backend developers start implementing the logic and prepare the API documentation as they go for the front end developers. 
        - This approach is usually used when the project is small and there are only a couple of developers working on the project. 
        - It has the advantage of saving time upfront and start working on the project right away. 

      - My personal preference, for smaller size projects like ours, is to use the Design-First approach as much as possible in the begining and then modify the design and documentation as we work on the backend and get better understanding of the specific data structure we need to send and recieve from the backend. 

      - The goal of this project is to help you understand the full-stack flow of the application. For that reason, we will rather try to design each Microservice inidividually, try to visualize using diagrams, implement it end to end and repeat the same process for the next Microservice. This approach will help you understand the full-stack flow of the application. 


    - APIs design

      ** The common practice is to prepare an api documentation before starting to work on the backend. There is usually one common place to put the documentation in a way it is easily accessible to all the developers working on the project. 
        Sample: file:///Users/abekele/Desktop/GarageApp/apiEndPoint/index.html 

      - We now have to think of all the API endpoints that we need to implement for each Microservice. 
      
        ** - Employees 
          GET All
            Query: 
              limit  
          For: 
            List of Employees page 

          Get Employees
          ------------- 
            request
            GET /api/employees HTTP/1.1
            Host: localhost:8080 
            
            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "limit":10,
              "contacts":
              [
                {
                  "employee_id": 1,
                  "employee_email": "test@test.com",
                  "employee_first_name": "Test",
                  "employee_last_name": "Test",
                  "employee_phone": "555-555-5555",
                  "active_employee": 1,
                  "added_date": "2016-11-28T14:10:11.338Z"
                },
                {},
                ...
              ]
            }

          ------------- 

        ** - Single Employee 
          GET by ID 
          POST New Employee
          PUT by ID (FORM)  

          For: 
            Add new Employee page (FORM)  
            Edit Employee page
            Logged in user header

          NOTE: Add active flag  (Only active employees can log in)

          Get Single Employee
          -------------------- 
            request
            GET /api/employee/:id HTTP/1.1
            Host: localhost:8080 

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "employee_id": 1,
              "employee_email": "test@test.com",
              "employee_first_name": "Test",
              "employee_last_name": "Test",
              "employee_phone": "555-555-5555",
              "active_employee": 1,
              "added_date": "2016-11-28T14:10:11.338Z"
            }
          --------------------

          Add New Employee
          ----------------- 
            request
            POST /api/employee HTTP/1.1
            Content-Type: application/json 
            Host: localhost:8080 
            {
              "employee_email": "test@test.com",
              "employee_first_name": "Test",
              "employee_last_name": "Test",
              "employee_phone": "555-555-5555",
              "active_employee": 1,
              "added_date": "2016-11-28T14:10:11.338Z", 
              "employee_password": "8HYsy&^uud*7hh", 
            }

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "success":"true"
            }
          -----------------

          Update Employee
          ---------------  
            request
            PUT /api/employee HTTP/1.1
            Content-Type: application/json 
            Host: localhost:8080 
            {
              "employee_id": 1,
              "employee_first_name": "Test",
              "employee_last_name": "Test",
              "employee_phone": "555-555-5555",
              "active_employee": 1,
            }

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "success":"true"
            }
          -----------------
        
        ** - Services 
          GET All
          For: 
            Display services on order creation page 
              - Only active services show up  


          Get All Services
          ---------------- 
            request
            GET /api/services HTTP/1.1
            Host: localhost:8080 

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              {
                "service_id": 1,
                "service_name": "Oil change",
                "service_description": "Some description about the oil change"
              },
              {},
              ...
            }
          ---------------- 

        ** Single service 
          GET by id 
          POST - New service 
          PUT - Edit service
          DELETE a service (Not advisable as it could have been provided in the past) 
            - Just add a flag that says active service or non active service 

          For: 
            Add new service (FORM) 
            Edit service 

          NOTE: Add active flag (Only active services show up on new order page) 

          Get Single Service
          ------------------ 
            request
            GET /api/service/:id HTTP/1.1
            Host: localhost:8080 

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "service_id": 1,
              "service_name": "Oil change",
              "service_description": "Some description about the oil change"
            }
          ------------------

          Add New Service
          ---------------
            request
            POST /api/service HTTP/1.1
            Content-Type: application/json 
            Host: localhost:8080 
            {
              "service_name": "Oil change",
              "service_description": "Some description about the oil change"
            }

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "success":"true"
            }
          ---------------

          Update Service
          ---------------  
            request
            PUT /api/service HTTP/1.1
            Content-Type: application/json 
            Host: localhost:8080 
            {
              "service_id": 1,
              "service_name": "Oil change updated",
              "service_description": "Some description about the oil change"
            }

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "success":"true"
            }
          ---------------

        ** - Customers 
          GET All 
          Query: 
            limit 
            sortby 

          For: List of customers page 
      
          Get Customers
          ------------- 
            request
            GET /api/customers HTTP/1.1
            Host: localhost:8080 
            
            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "limit":10,
              "customers":
              [
                {
                  "customer_id": 1,
                  "customer_email": "test@test.com",
                  "customer_phone_number": "555-555-5555",
                  "customer_first_name": "Test",
                  "customer_last_name": "Test",
                  "customer_hash": "khsdgfkujhkjnfdfg7763hdff",
                  "active_customer_status": 1,
                  "customer_added_date": "2016-11-28T14:10:11.338Z"
                },
                {},
                ...
              ]
            }
          ------------- 

        ** - Single customer 
          GET by ID  
          POST New customer 
          PUT by ID  

          For: 
            Create new customer 
            Customer page (Shows orders at the bottom) 

          Get Single Customer
          -------------------- 
            request
            GET /api/customer/:id HTTP/1.1
            Host: localhost:8080 

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "customer_id": 1,
              "customer_email": "test@test.com",
              "customer_phone_number": "555-555-5555",
              "customer_first_name": "Test",
              "customer_last_name": "Test",
              "customer_hash": "khsdgfkujhkjnfdfg7763hdff",
              "active_customer_status": 1,
              "customer_added_date": "2016-11-28T14:10:11.338Z"
            }
          --------------------

          Add New Customer
          ----------------- 
            request
            POST /api/employee HTTP/1.1
            Content-Type: application/json 
            Host: localhost:8080 
            {
              "customer_email": "test@test.com",
              "customer_phone_number": "555-555-5555",
              "customer_first_name": "Test",
              "customer_last_name": "Test",
              "customer_hash": "khsdgfkujhkjnfdfg7763hdff",
              "active_customer_status": 1,
              "customer_added_date": "2016-11-28T14:10:11.338Z"
            }

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "success":"true"
            }
          -----------------

          Update Customer
          ---------------  
            request
            PUT /api/employee HTTP/1.1
            Content-Type: application/json 
            Host: localhost:8080 
            {
              "customer_id": 1,
              "customer_phone_number": "555-555-5555",
              "customer_first_name": "Test",
              "customer_last_name": "Test",
              "active_customer_status": 1,
            }

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "success":"true"
            }
          -----------------

        ** - Orders 
          GET All 
          Query: 
            limit 
            sortby  
            filter by completed 

          For: 
            - List of all orders to work on sorted by order date 

          Get All Orders
          ---------------- 
            request
            GET /api/orders HTTP/1.1
            Host: localhost:8080 

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              {
                "order_id": 1,
                "employee_id": 1,
                "customer_id": 1,
                "vehicle_id": 1,
                "order_description": "Some description about the order",
                "order_date": "2016-11-28T14:10:11.338Z"
                "estimated_completion_date": "2016-11-28T14:10:11.338Z"
                "completion_date": "",
                "order_completed": 0,
                "order_services": {
                  {
                    "order_service_id": 1,
                    "order_id": 1,
                    "service_id": 1,
                  },
                  {},
                  ...
                }
              },
              {},
              ...
            }
          ---------------- 

        ** - Single Order 
          GET by ID 
          POST New Order
          PUT Update order 

          For: 
            Create new order 
            Modify order  
            Order status page 

          Get Single Order
          -------------------- 
            request
            GET /api/order/:id HTTP/1.1
            Host: localhost:8080 

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "order_id": 1,
              "employee_id": 1,
              "customer_id": 1,
              "vehicle_id": 1,
              "order_description": "Some description about the order",
              "order_date": "2016-11-28T14:10:11.338Z"
              "estimated_completion_date": "2016-11-28T14:10:11.338Z"
              "completion_date": "",
              "order_completed": 0,
              "order_services": {
                {
                  "order_service_id": 1,
                  "order_id": 1,
                  "service_id": 1,
                },
                {},
                ...
              }
            }
          --------------------

          Add New Order
          ----------------- 
            request
            POST /api/order HTTP/1.1
            Content-Type: application/json 
            Host: localhost:8080 
            {
              "employee_id": 1,
              "customer_id": 1,
              "vehicle_id": 1,
              "order_description": "Some description about the order",
              "order_date": "2016-11-28T14:10:11.338Z"
              "estimated_completion_date": "2016-11-28T14:10:11.338Z"
              "completion_date": "",
              "order_completed": 0,
              "order_services": {
                {
                  "order_service_id": 1,
                  "order_id": 1,
                  "service_id": 1,
                },
                {},
                ...
              }
            }

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "success":"true"
            }
          -----------------

          Update Order
          ---------------  
            request
            PUT /api/order HTTP/1.1
            Content-Type: application/json 
            Host: localhost:8080 
            {
              "order_id": 1,
              "order_description": "Some description about the order",
              "estimated_completion_date": "2016-11-28T14:10:11.338Z"
              "completion_date": "",
              "order_completed": 0,
              "order_services": {
                {
                  "order_service_id": 1,
                  "order_id": 1,
                  "service_id": 1,
                },
                {},
                ...
              }
            }

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "success":"true"
            }
          -----------------

        ** Single Vehicle  
          GET by id  
          POST New Vehicle 
          PUT by id 

          For: 
            Adding new vehicle 
            Updating vehicle info 
              - Milage should be added based on date 
              - Not just update  

          Get Single Vehicle
          ------------------ 
            request
            GET /api/vehicle/:id HTTP/1.1
            Host: localhost:8080 

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "vehicle_id": 1,
              "customer_id": 1,
              "vehicle_year": "2022",
              "vehicle_make": "Tesla",
              "vehicle_model": "Model S",
              "vehicle_type": "Sedan",
              "vehicle_mileage": "10000",
              "vehicle_tag": "9890Ab2",
              "vehicle_serial": "458008887783543435553434",
              "vehicle_color": "Silver"
            }
          --------------------

          Add New Vehicle
          ---------------
            request
            POST /api/vehicle HTTP/1.1
            Content-Type: application/json 
            Host: localhost:8080 
            {
              "customer_id": 1,
              "vehicle_year": "2022",
              "vehicle_make": "Tesla",
              "vehicle_model": "Model S",
              "vehicle_type": "Sedan",
              "vehicle_mileage": "10000",
              "vehicle_tag": "9890Ab2",
              "vehicle_serial": "458008887783543435553434",
              "vehicle_color": "Silver"
            }

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "success":"true"
            }
          -----------------

          Update Vehicle
          ---------------  
            request
            PUT /api/vehicle HTTP/1.1
            Content-Type: application/json 
            Host: localhost:8080 
            {
              "vehicle_id": 1,
              "vehicle_year": "2022",
              "vehicle_make": "Tesla",
              "vehicle_model": "Model S",
              "vehicle_type": "Sedan",
              "vehicle_mileage": "10000",
              "vehicle_tag": "9890Ab2",
              "vehicle_serial": "458008887783543435553434",
              "vehicle_color": "Silver"
            }

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "success":"true"
            }
          -----------------

        ** - Vehicles Per Customer  
          GET by customer ID 

          For: 
            To display on customer page 
            List of vehicles page  
              - To filter by model and make  

          Get Vehicles Per Customer  
          ------------------------- 
            request
            GET /api/vehicles/:customer_id HTTP/1.1
            Host: localhost:8080 

            response
            HTTP/1.1 200 OK
            Content-Type: application/json
            {
              "customer_id": 1,
              {
                "vehicle_id": 1,
                "customer_id": 1,
                "vehicle_year": "2022",
                "vehicle_make": "Tesla",
                "vehicle_model": "Model S",
                "vehicle_type": "Sedan",
                "vehicle_mileage": "10000",
                "vehicle_tag": "9890Ab2",
                "vehicle_serial": "458008887783543435553434",
                "vehicle_color": "Silver"
              },
              {},
              ...
            }
            
          --------------------

** Next day - Building a simple application to understand the flow **  
    
    

