Building Abe Garage's App 
------------------------- 
  - First thing first, let's create a folder to hold all of our files related to the Project  
    - AbeGarageProject 
    - Create a separate folder just to keep supporting resources 
      - Resources
      - Inside the resources is where you keep all the materials you will use as a refernce 
        - This includes 
          - The functional scope, the wireframe, the designs, the database design, and the API documentation. 
        - Let's collect all of them 
          - Functional scope (We have already prepared this when we wrote our proposal) 
          - The wireframes 
            - Contains the details of the pages we need 
          - The designs 
            - Including the template we bought for the frontend 
          - The database design (We mainly need the prepared SQL queries)
          - The API documentation 
            - Let's now design all of the API endpoints we need and document them 
          
  - Once we have everything collected in one place, the next step is to clean up the purchased html file to match our need (chosen design) 
    - Usually, for small projects like this, that you will be working based on the bought template, the final UI desins for your pages are generated by modifying the template. 
    - The templates usually come with a lot of sections and pages that you don't need. You need to create your own modified version following the wireframes you have created. 
    - Let's us now create the HTML Template for our APP  

    Steps: 
      - Copy all the assets from the bought template 
      - Start by creating the index.html file 
        - You can start by copying the index.html file from the template 
        - Modify the header and footer sections first 
          - Change the multibrand tag line 
          - Change the Phone number 
            - Display the logged in user name if logged in 
            (This will be conditionally displayed based on the user login status) 
            - Remove the multi language section 
          - Change the menu to match our wireframe 
            - Remove the menu items that we don't need 
            - Add the menu items that we need 
              - Home 
              - About 
              - Services 
              - Contact 
              - Admin 
            - Remove the search icon
            - Change the Book schedule button to Login/Logout 
      -- Once you are done with every page, you can now move on to writing the code 

  - Building our App 
      Set up the git repository 
    ------------------------- 
      - Set up the repo as a private repo on git hub 
        /abegaragemainapp 
      - Clone the repo to your local machine and start working on 
        - Before you clone the code, create access token on github 
        - git clone  {project link} (Use the SSH link as this is a private repo)
        - If you haven't added your SSH key to your git hub account, you need to do that first  
          (We will see how to do that when we later configure our server)  

    Set up the dev database locally 
    ------------------------------- 
      - Install MySql on your local machine 
        - https://dev.mysql.com/downloads/installer/ 
        (If you have MAMP already installed, you can use that as well) 
      
      - Create a new database and add user to the database 
        username: abegaragemain
        password: abegaragemain
        database name: 2bsZGCQUefTUvp  

    Set up the Backend 
    ------------------ 
      - Create the "backend" Folder: 
        - To hold all your backend codes 
        - package.json (file): 
          Create the initial package.json file to track your dependencies 
            - npm init 
      - Let us now create all the folder structures 
        ├ backend 
          ├── app.js 
            - (This is where everything starts from.)
          ├── config 
            - (This folder contains all the configuration files)
            ├── db.config.js
          ├── controllers 
            - (This folder contains all the controllers that handle the requests and responses)
            ├── microServiceName1.controller.js 
            ├── microServiceName2.controller.js
          ├── middlewares 
            - (This folder contains all the middlewares that we want to use before we process the request)
            ├── authJwt.js
            ├── verifySignUp.js
          ├── models 
            - (This folder contains all the models that we will use to interact with the database) 
            ├── microServiceName1.model.js
            ├── microServiceName2.model.js
          ├── routes 
            - (This folder contains all the routes/paths that we will use to handle the requests)
            ├── microServiceName1.routes.js
            ├── microServiceName2.routes.js
          ├── services 
            -(This folder contains all the code that we will use to interact with the database)
            ├── microServiceName1.service.js
            ├── microServiceName2.service.js
          ├── utils 
            - (This folder contains all the utility functions that we will use in the project. Meaning function or set of functions that provide reusable functionality or perform common tasks. Example could be a function to handle errors, a function to generate random numbers, etc.) 
            ├── utilityName.util.js
          ├── node_modules 
            - (This folder contains all the dependencies that we install using npm)
          ├── package.json 
            - (This file contains all the information about the project and the dependencies that we install using npm) 
          ├── package-lock.json 
            - (This file contains all the information about the dependencies that we install using npm)
          ├── README.md 
            - (This file containss explanation about the project)
          ├── .gitignore 
            - (This file contains all the files that we want to ignore when we push the project to github) 
          ├── .env 
            - (This file contains all the environment variables that we will use in the project. To save variables that we don't want to push to github. Example could be database username, password, etc.) 
          ├── .eslintrc.js 
            - (This file contains all the rules that we want to use to lint our code. Linting is the process of running a program that will analyze code for potential errors.)
          ├── __tests__ 
            - (This folder contains all the tests that we will write for the project. Example could be unit tests, integration tests, etc.) 
            ├── microServiceName1.test.js
            ├── microServiceName2.test.js 

    Set up the Frontend 
    -------------------
      ├ fronend
        ├── public
        ├── node_modules
        ├── src
          ├── assets
            ├── images
            ├── styles
          ├── Context
            ├── context1
              ├── Context1.js
            ├── context2
              ├── Context2.js
          ├── markup 
            ├── components
              ├── component1
                ├── Component1.js
                ├── Component1.css
              ├── component2
                ├── Component2.js
                ├── Component2.css
            ├── pages
              ├── page1
                ├── Page1.js
                ├── Page1.css
              ├── page2
                ├── Page2.js
                ├── Page2.css
          ├── services
            ├── service1
              ├── service1.js
            ├── service2
              ├── service2.js
          ├── App.js
          ├── App.css
          ├── index.js
          ├── index.css
          ├── reportWebVitals.js
          ├── setupTests.js
        ├── .gitignore
        ├── package.json
        ├── package-lock.json
        ├── README.md
        ├── .env 
        ├── .eslintrc.json
        ├── .vscode
      
  Once we are done creating the folder structure, we can now start writing the code. 

                  